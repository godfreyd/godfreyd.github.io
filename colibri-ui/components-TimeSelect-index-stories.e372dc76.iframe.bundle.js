"use strict";(self.webpackChunkcolibri_ui=self.webpackChunkcolibri_ui||[]).push([[1708],{"./src/components/TimeSelect/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,WithOutCurrentDate:()=>WithOutCurrentDate,__namedExportsOrder:()=>__namedExportsOrder,default:()=>index_stories});var react=__webpack_require__("./node_modules/react/index.js"),Select=__webpack_require__("./src/components/Select/index.tsx"),format=__webpack_require__("./node_modules/date-fns/format.mjs"),addMinutes=__webpack_require__("./node_modules/date-fns/addMinutes.mjs"),isBefore=__webpack_require__("./node_modules/date-fns/isBefore.mjs"),parse=__webpack_require__("./node_modules/date-fns/parse.mjs");const day=new Date;day.setHours(24,0,0,0);const formatTime=date=>(0,format.GP)(date,"HH:mm"),checkIsBeforeNow=(time,currentDate)=>!!currentDate&&(0,isBefore.Y)((0,parse.qg)(time,"HH:mm",currentDate),new Date),checkIsBeforeSelectedDate=(time,interval,date)=>{if(date){const selectedDate=new Date(date);return selectedDate.setMinutes(selectedDate.getMinutes()+interval),(0,isBefore.Y)((0,parse.qg)(time,"HH:mm",date),selectedDate)}return!1},OptionLabel=({time,onClick,onMouseEnter})=>{const ref=(0,react.useRef)(null);return react.createElement("span",{onClick,onMouseEnter,ref},time)},Label=OptionLabel;OptionLabel.__docgenInfo={description:"",methods:[],displayName:"OptionLabel",props:{time:{required:!0,tsType:{name:"string"},description:""},onClick:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""},onMouseEnter:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""}}};const TimeSelect=({value,name,currentDate,selectedDate,label,interval=15,onChange,disabled,...props})=>{const baseOptions=(0,react.useMemo)((()=>((interval=15)=>new Array(1440/interval).fill(null).map(((_,index)=>{const date=(0,addMinutes.z)(day,index*interval);return{time:formatTime(date)}})))(interval).map((item=>({value:item.time,label:react.createElement(Label,{time:item.time})})))),[interval]),options=(0,react.useMemo)((()=>baseOptions.map((option=>({...option,disabled:!!selectedDate&&checkIsBeforeSelectedDate(option.value,interval,selectedDate)||!!currentDate&&checkIsBeforeNow(option.value,currentDate)})))),[baseOptions,currentDate,selectedDate,interval]);return react.createElement(Select.A,{...props,name,value,label,options,onChange,disabled})},components_TimeSelect=TimeSelect;TimeSelect.__docgenInfo={description:"",methods:[],displayName:"TimeSelect",props:{interval:{required:!1,tsType:{name:"union",raw:"5 | 10 | 15 | 30",elements:[{name:"literal",value:"5"},{name:"literal",value:"10"},{name:"literal",value:"15"},{name:"literal",value:"30"}]},description:"",defaultValue:{value:"15",computed:!1}},currentDate:{required:!1,tsType:{name:"union",raw:"Date | null",elements:[{name:"Date"},{name:"null"}]},description:""},selectedDate:{required:!1,tsType:{name:"union",raw:"Date | null",elements:[{name:"Date"},{name:"null"}]},description:""},name:{required:!1,tsType:{name:"string"},description:""},disabled:{required:!1,tsType:{name:"boolean"},description:""}},composes:["Omit"]};var addHours=__webpack_require__("./node_modules/date-fns/addHours.mjs"),startOfDay=__webpack_require__("./node_modules/date-fns/startOfDay.mjs");const index_stories={title:"UI/TimeSelect",parameters:{layout:"centered"},argTypes:{},component:components_TimeSelect},Template=args=>{const[value,setValue]=(0,react.useState)("");return react.createElement("div",{style:{width:"10vw"}},react.createElement(components_TimeSelect,{...args,value,fullWidth:!0,onChange:v=>setValue(v)}))},Default=Template.bind({});Default.args={label:"Start time",placeholder:"Select options",interval:10,currentDate:(()=>{const hoursOffset=(new Date).getTimezoneOffset()/60+(()=>{const now=new Date;return-new Date(now.toLocaleString("en-GB",{timeZone:"Europe/London"})).getTimezoneOffset()/60})(),londonDate=(0,addHours.L)(new Date,hoursOffset);return(0,startOfDay.o)(londonDate)})()};const WithOutCurrentDate=Template.bind({});WithOutCurrentDate.args={placeholder:"Select options",interval:10};const __namedExportsOrder=["Default","WithOutCurrentDate"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => {\n  const [value, setValue] = useState<string>('');\n  return <div style={{\n    width: '10vw'\n  }}>\n    <TimeSelect {...args} value={value} fullWidth onChange={v => setValue(v)} /></div>;\n}",...Default.parameters?.docs?.source}}},WithOutCurrentDate.parameters={...WithOutCurrentDate.parameters,docs:{...WithOutCurrentDate.parameters?.docs,source:{originalSource:"args => {\n  const [value, setValue] = useState<string>('');\n  return <div style={{\n    width: '10vw'\n  }}>\n    <TimeSelect {...args} value={value} fullWidth onChange={v => setValue(v)} /></div>;\n}",...WithOutCurrentDate.parameters?.docs?.source}}}}}]);