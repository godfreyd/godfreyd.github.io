"use strict";(self.webpackChunkcolibri_ui=self.webpackChunkcolibri_ui||[]).push([[1708],{"./src/components/TimeSelect/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,WithBusinessHoursAndSelectedDate:()=>WithBusinessHoursAndSelectedDate,WithCurrentAndSelectedDate:()=>WithCurrentAndSelectedDate,WithOutCurrentDate:()=>WithOutCurrentDate,WithPastSelectedDate:()=>WithPastSelectedDate,WithSelectedDate:()=>WithSelectedDate,__namedExportsOrder:()=>__namedExportsOrder,default:()=>index_stories});var react=__webpack_require__("./node_modules/react/index.js"),Select=__webpack_require__("./src/components/Select/index.tsx"),format=__webpack_require__("./node_modules/date-fns/format.mjs"),addMinutes=__webpack_require__("./node_modules/date-fns/addMinutes.mjs"),parse=__webpack_require__("./node_modules/date-fns/parse.mjs"),isBefore=__webpack_require__("./node_modules/date-fns/isBefore.mjs");const day=new Date;day.setHours(24,0,0,0);const formatTime=date=>(0,format.GP)(date,"HH:mm"),OptionLabel=({time,onClick,onMouseEnter})=>{const ref=(0,react.useRef)(null);return react.createElement("span",{onClick,onMouseEnter,ref},time)},Label=OptionLabel;OptionLabel.__docgenInfo={description:"",methods:[],displayName:"OptionLabel",props:{time:{required:!0,tsType:{name:"string"},description:""},onClick:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""},onMouseEnter:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""}}};const TimeSelect=({value,name,currentDate,selectedDate,label,interval=15,onChange,disabled,allowedTimeRange,...props})=>{const baseOptions=(0,react.useMemo)(()=>((interval=15)=>new Array(1440/interval).fill(null).map((_,index)=>{const date=(0,addMinutes.z)(day,index*interval);return{time:formatTime(date)}}))(interval).map(item=>({value:item.time,label:react.createElement(Label,{time:item.time})})),[interval]),options=(0,react.useMemo)(()=>baseOptions.map(option=>{const timeRangeDisabled=!!allowedTimeRange&&!((timeString,range)=>{const[hours,minutes]=timeString.split(":").map(Number),totalMinutes=60*hours+minutes,[startHours,startMinutes]=range.start.split(":").map(Number),startTotalMinutes=60*startHours+startMinutes,[endHours,endMinutes]=range.end.split(":").map(Number);return totalMinutes>=startTotalMinutes&&totalMinutes<=60*endHours+endMinutes})(option.value,allowedTimeRange),beforeSelectedDisabled=!!selectedDate&&((time,interval,date)=>{if(date){const selectedDate=new Date(date);selectedDate.setMinutes(selectedDate.getMinutes()+interval);const baseDate=new Date(date);baseDate.setHours(0,0,0,0);const parsedTime=(0,parse.qg)(time,"HH:mm",baseDate);return(0,isBefore.Y)(parsedTime,selectedDate)}return!1})(option.value,interval,selectedDate),beforeCurrentDisabled=!!currentDate&&((time,currentDate)=>{if(!currentDate)return!1;const baseDate=new Date(currentDate);baseDate.setHours(0,0,0,0);const parsedTime=(0,parse.qg)(time,"HH:mm",baseDate);return(0,isBefore.Y)(parsedTime,currentDate)})(option.value,currentDate),isDisabled=timeRangeDisabled||beforeSelectedDisabled||beforeCurrentDisabled;return{...option,disabled:isDisabled}}),[baseOptions,currentDate,selectedDate,interval,allowedTimeRange]);return react.createElement(Select.A,{...props,name,value,label,options,onChange,disabled})},components_TimeSelect=TimeSelect;TimeSelect.__docgenInfo={description:"",methods:[],displayName:"TimeSelect",props:{interval:{required:!1,tsType:{name:"union",raw:"5 | 10 | 15 | 30",elements:[{name:"literal",value:"5"},{name:"literal",value:"10"},{name:"literal",value:"15"},{name:"literal",value:"30"}]},description:"",defaultValue:{value:"15",computed:!1}},currentDate:{required:!1,tsType:{name:"union",raw:"Date | null",elements:[{name:"Date"},{name:"null"}]},description:""},selectedDate:{required:!1,tsType:{name:"union",raw:"Date | null",elements:[{name:"Date"},{name:"null"}]},description:""},name:{required:!1,tsType:{name:"string"},description:""},disabled:{required:!1,tsType:{name:"boolean"},description:""},allowedTimeRange:{required:!1,tsType:{name:"signature",type:"object",raw:"{ start: string; end: string }",signature:{properties:[{key:"start",value:{name:"string",required:!0}},{key:"end",value:{name:"string",required:!0}}]}},description:""}},composes:["Omit"]};const index_stories={title:"UI/TimeSelect",parameters:{layout:"centered"},argTypes:{},component:components_TimeSelect},Template=args=>{const[value,setValue]=(0,react.useState)("");return react.createElement("div",{style:{width:"10vw"}},react.createElement(components_TimeSelect,{...args,value,fullWidth:!0,onChange:v=>setValue(v)}))},Default=Template.bind({});Default.args={label:"Start time",placeholder:"Select options",interval:10,currentDate:new Date};const WithOutCurrentDate=Template.bind({});WithOutCurrentDate.args={placeholder:"Select options",interval:10};const WithSelectedDate=Template.bind({});WithSelectedDate.args={label:"End time (start was 14:30)",placeholder:"Select end time",interval:15,selectedDate:new Date("2024-07-24T14:30:00")};const WithPastSelectedDate=Template.bind({});WithPastSelectedDate.args={label:"End time (start was 10:00)",placeholder:"Select end time",interval:30,selectedDate:new Date("2024-07-24T10:00:00")};const WithCurrentAndSelectedDate=Template.bind({});WithCurrentAndSelectedDate.args={label:"End time (considering both current and start time)",placeholder:"Select end time",interval:15,currentDate:new Date("2024-07-24T12:00:00"),selectedDate:new Date("2024-07-24T13:30:00")};const WithBusinessHoursAndSelectedDate=Template.bind({});WithBusinessHoursAndSelectedDate.args={label:"Business hours end time (start was 14:00)",placeholder:"Select end time",interval:15,allowedTimeRange:{start:"09:00",end:"18:00"},selectedDate:new Date("2024-07-24T14:00:00")};const __namedExportsOrder=["Default","WithOutCurrentDate","WithSelectedDate","WithPastSelectedDate","WithCurrentAndSelectedDate","WithBusinessHoursAndSelectedDate"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => {\n  const [value, setValue] = useState<string>('');\n  return <div style={{\n    width: '10vw'\n  }}>\n    <TimeSelect {...args} value={value} fullWidth onChange={v => setValue(v)} /></div>;\n}",...Default.parameters?.docs?.source}}},WithOutCurrentDate.parameters={...WithOutCurrentDate.parameters,docs:{...WithOutCurrentDate.parameters?.docs,source:{originalSource:"args => {\n  const [value, setValue] = useState<string>('');\n  return <div style={{\n    width: '10vw'\n  }}>\n    <TimeSelect {...args} value={value} fullWidth onChange={v => setValue(v)} /></div>;\n}",...WithOutCurrentDate.parameters?.docs?.source}}},WithSelectedDate.parameters={...WithSelectedDate.parameters,docs:{...WithSelectedDate.parameters?.docs,source:{originalSource:"args => {\n  const [value, setValue] = useState<string>('');\n  return <div style={{\n    width: '10vw'\n  }}>\n    <TimeSelect {...args} value={value} fullWidth onChange={v => setValue(v)} /></div>;\n}",...WithSelectedDate.parameters?.docs?.source}}},WithPastSelectedDate.parameters={...WithPastSelectedDate.parameters,docs:{...WithPastSelectedDate.parameters?.docs,source:{originalSource:"args => {\n  const [value, setValue] = useState<string>('');\n  return <div style={{\n    width: '10vw'\n  }}>\n    <TimeSelect {...args} value={value} fullWidth onChange={v => setValue(v)} /></div>;\n}",...WithPastSelectedDate.parameters?.docs?.source}}},WithCurrentAndSelectedDate.parameters={...WithCurrentAndSelectedDate.parameters,docs:{...WithCurrentAndSelectedDate.parameters?.docs,source:{originalSource:"args => {\n  const [value, setValue] = useState<string>('');\n  return <div style={{\n    width: '10vw'\n  }}>\n    <TimeSelect {...args} value={value} fullWidth onChange={v => setValue(v)} /></div>;\n}",...WithCurrentAndSelectedDate.parameters?.docs?.source}}},WithBusinessHoursAndSelectedDate.parameters={...WithBusinessHoursAndSelectedDate.parameters,docs:{...WithBusinessHoursAndSelectedDate.parameters?.docs,source:{originalSource:"args => {\n  const [value, setValue] = useState<string>('');\n  return <div style={{\n    width: '10vw'\n  }}>\n    <TimeSelect {...args} value={value} fullWidth onChange={v => setValue(v)} /></div>;\n}",...WithBusinessHoursAndSelectedDate.parameters?.docs?.source}}}}}]);